---
- hosts: localhost
  #connection: local
  gather_facts: no

  vars:
    REGION: 'ap-northeast-2'
    LOCAL_HOME: "{{ lookup('env','HOME')}}"
    VPC_ID: 'vpc-f51eca9e'
    #STATE: absent
    STATE: present
    INSTCNT: 1
    ZN: 'ap-northeast-2c'
    ansible_password: test@kkk2020
  tasks:

  #Create vpc subnet id
  - name: Create subnet for webnode servers
    ec2_vpc_subnet:
      #state: '{{ STATE }}'
      vpc_id: '{{ VPC_ID }}'
      cidr: 172.31.1.0/24
      az : '{{ ZN }}'
      tags:
        Name: wasnode_subnet
    register: wasnode_subnet
    
  - name: vpc_subnet_facts get 
    ec2_vpc_subnet_facts:
      filters:
        vpc-id: '{{ VPC_ID }}'
        "tag:Name":  "wasnode_subnet" 
    register: subnet_fact

  - set_fact:
      subnet_id: "{{ subnet_fact.subnets[0].subnet_id }}"

  - debug:
      var: subnet_id

  #- meta: end_play
  #Get public ip of my machine
  - name: Get my public IP
    ipify_facts: 

  - name: winwasnode sg group
    ec2_group:
      name: winwas_service_sg
      description: winwas_service
      state: '{{ STATE }}'
      region: '{{ REGION }}'
      #Basically ingress
      rules_egress:
        - proto: tcp
          cidr_ip: 0.0.0.0/0
          to_port: 443
          from_port: 443

      rules:
        - proto: tcp
          from_port: 8080
          to_port: 8080
          #cidr_ip: 0.0.0.0/0
          cidr_ip: 
             - '{{ ipify_public_ip }}/32'
          group_desc: for node
        - proto: tcp 
          #from_port: 22
          #rdpport
          from_port: 3389
          to_port: 3389
          #to_port: 22
          cidr_ip:
             - '{{ ipify_public_ip }}/32'
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 
             - '{{ ipify_public_ip }}/32'

        - proto: tcp 
          #winrm
          from_port: 5986
          to_port: 5986
          cidr_ip:
             - '{{ ipify_public_ip }}/32'

  - name: Create aws instance for winwas
    ec2:
      region: '{{ REGION }}'
      instance_type: t2.micro
      image: ami-0b4d076bfd308be28
      group: winwas_service_sg
      wait: yes
      count: '{{ INSTCNT }}'
      vpc_subnet_id: '{{ subnet_id }}'
      assign_public_ip: yes
      private_ip: '172.31.1.10'
      state: '{{ STATE }}'
      zone: '{{ ZN }}'
      instance_tags:
            name: winwastst
      user_data: "{{ lookup('template','winrm-userdata.txt.j2') }}"
    register: ec2_out

  - debug:
       var: ec2_out

  #Wait for winrm to listen on port 5986
  - name: Wait for WinRM on all hosts
    wait_for:
      port: 5986
      host: "{{ item.public_ip }}"
      timeout: 300
      state: started
    with_items: "{{ ec2_out.instances }}"


#Using ec2_instance_info
#  - ec2_instance_info:
#       filters:
#         "tag:name": winwastst
#         instance-state-name: ["running"]
#
#         #"Status Check" : ok
#    register: result
#
#  - debug:
#      var: result.instances[0]['public_ip_address']
#
#
#  - name: wait for 3389 port running
#    wait_for:
#      host: "{{  result.instances[0]['public_ip_address'] }}"
#      port: 3389
#      delay: 1
#
#  #- name: get administrator password
#  - name: get the Administrator password
#    ec2_win_password:
#      profile: default
#      instance_id: "{{ result.instances[0]['instance_id'] }}"
#      region: "{{ REGION }}"
#      key_file: "{{ SSH_KEY_NAME }}.pem"
#    register: adminpass
#    until: adminpass.win_password != ""
#    retries: 3
#    delay: 30
#
#  - debug:
#      var: adminpass.win_password
#
#
#
##  - name: nc to win host 3389 if it is ready or not
##    command: "/bin/nc {{ result.instances[0]['public_ip_address'] }} 3389; rev=$?; echo $rev"
##    register: result
##
##  - debug:
##       var: result
#
#
##  - ec2_instance_facts:
##       filters:
##         "tag:name": winwastst
#      
#  #Key generate for instance connection
#  #- name: Generate ssh key for codecommit connection
#  #  openssh_keypair:
#  #    path: '{{ SSH_KEY_NAME }}'
#  #    size: 2048
#  #    type: rsa
