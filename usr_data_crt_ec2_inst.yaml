---
- hosts: localhost
  #connection: local
  gather_facts: no

  vars:
    REGION: 'ap-northeast-2'
    LOCAL_HOME: "{{ lookup('env','HOME')}}"
    VPC_ID: 'vpc-f51eca9e'
    #STATE: absent
    STATE: present
    INSTCNT: 1
    ZN: 'ap-northeast-2c'
    ansible_pass: test@kkk2020
  tasks:

  #Create vpc subnet id
  - name: Create subnet for webnode servers
    ec2_vpc_subnet:
      #state: '{{ STATE }}'
      vpc_id: '{{ VPC_ID }}'
      cidr: 172.31.1.0/24
      az : '{{ ZN }}'
      tags:
        Name: wasnode_subnet
    register: wasnode_subnet
    
  - name: vpc_subnet_facts get 
    ec2_vpc_subnet_facts:
      filters:
        vpc-id: '{{ VPC_ID }}'
        "tag:Name":  "wasnode_subnet" 
    register: subnet_fact

  - set_fact:
      subnet_id: "{{ subnet_fact.subnets[0].subnet_id }}"

  - debug:
      var: subnet_id

  #- meta: end_play
  #Get public ip of my machine
  - name: Get my public IP
    ipify_facts: 

  - name: winwasnode sg group
    ec2_group:
      name: winwas_service_sg
      description: winwas_service
      state: '{{ STATE }}'
      region: '{{ REGION }}'
      #Basically ingress
      rules_egress:
        - proto: tcp
          cidr_ip: 0.0.0.0/0
          to_port: 443
          from_port: 443

      rules:
        - proto: tcp
          from_port: 8080
          to_port: 8080
          #cidr_ip: 0.0.0.0/0
          cidr_ip: 
             - '{{ ipify_public_ip }}/32'
          group_desc: for node
        - proto: tcp 
          #from_port: 22
          #rdpport
          from_port: 3389
          to_port: 3389
          #to_port: 22
          cidr_ip:
             - '{{ ipify_public_ip }}/32'
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 
             - '{{ ipify_public_ip }}/32'

        - proto: tcp 
          #winrm
          from_port: 5986
          to_port: 5986
          cidr_ip:
             - '{{ ipify_public_ip }}/32'

  - name: Create aws instance for winwas
    ec2:
      region: '{{ REGION }}'
      instance_type: t2.micro
      image: ami-0b4d076bfd308be28
      group: winwas_service_sg
      wait: yes
      count: '{{ INSTCNT }}'
      vpc_subnet_id: '{{ subnet_id }}'
      assign_public_ip: yes
      private_ip: '172.31.1.10'
      state: '{{ STATE }}'
      zone: '{{ ZN }}'
      instance_tags:
            name: winwastst
      user_data: "{{ lookup('template','winrm-userdata.txt.j2') }}"
    register: ec2_out

  - debug:
       var: ec2_out


  #Wait for winrm to listen on port 5986
  - name: Wait for WinRM on all hosts
    wait_for:
      port: 5986
      host: "{{ item.public_ip }}"
      timeout: 300
      state: started
    with_items: "{{ ec2_out.instances }}"

  #Include winrm.yaml 
  - name: Include winrm.yaml
    include_vars:
      file: winrm.yaml

  - name: Create tmp dir in c:\\
    win_file:
      path: C:\tmp
      state: directory
    with_items: "{{ ec2_out.instances }}"

  #Win module need module. Do "pip3 install pywinrm"
  - name: 'Copy jdk-8u261-windows-x64.exe single file'
    win_copy:
      src: jdk-8u261-windows-x64.exe
      dest: 'C:\tmp\jdk-8u261-windows-x64.exe'
      #ansible_remote_tmp: 'C:\tmp'
    with_items: '{{ ec2_out.instances }}'

  - name: Copy apache-tomcat-8.5.57.exe single file
    win_copy:
      src: apache-tomcat-8.5.57.exe 
      dest: 'c:\tmp\apache-tomcat-8.5.57.exe'
    with_items: "{{ ec2_out.instances }}"

  #Install jdk-8.exe
  - name: Install jdk-8u261-windows-x64.exe and apache-tomcat-8.5.57.exe
    win_package:
      path: 'c:\tmp\jdk-8u261-windows-x64.exe'
      product_id: jdk-8u261
      arguments:
         - /s
         - /quiet
      state: present
    with_items: "{{ ec2_out.instances }}"
    register: inst_jdk

    #- debug:
    #  var: inst_jdk
    #  ignore_error: yes


  #- name: java_home set jdk1.8.0_261
  - name: java_home jdk-8u261
    win_path:
      name: JAVA_HOME
      elements: C:\Program Files\java\jdk1.8.0_261
      scope: machine
      state: present
    with_items: "{{ ec2_out.instances }}"
    register: inst_java_home

    #- debug:
    #  var: inst_java_home
  
  #- name: java_path set jdk1.8.0_261
  - name: path jdk-8u261
    win_path:
      name: PATH
      elements: C:\Program Files\java\jdk1.8.0_261\bin
      scope: machine
      state: present
    with_items: "{{ ec2_out.instances }}"
    register: inst_java_path
  #- debug:
  #    var: inst_java_path

  - name: Ensure user tomcat is present
    win_user:
      name: tomcat
      password: Pass#G*#9087
      state: present
      groups:
        - Users
    with_items: "{{ ec2_out.instances }}"

  - name: Grant domain account the SeServiceLogonRight user right
    win_user_right:
      name: SeServiceLogonRight
      users:
        - tomcat
      action: add
    with_items: "{{ ec2_out.instances }}"

  #Install apache-tomcat-8.5.57.exe
  - name: Install apache-tomcat-8.5.57.exe
    win_package:
      path: 'c:\tmp\apache-tomcat-8.5.57.exe'
      product_id: apache-tomcat-8.5.5.57
      arguments:
         - /S
         - /D=C:\tomcat8
      state: present
      user_name: tomcat
      user_password: Pass#G*#9087
    with_items: "{{ ec2_out.instances }}"
    register: inst_tomcat

  - name: Add TOMCAT USRS allow rights
    win_acl:
      path: C:\tomcat8
      user: tomcat
      rights: FullControl
      type: allow
      state: present
      inherit: ContainerInherit, ObjectInherit
      propagation: 'None'
    with_items: "{{ ec2_out.instances }}"

  #tomcat_home set apache-tomcat-8.5.57.exe
  - name: tomcat_home set apache-tomcat-8.5.57.exe
    win_path:
      name: TOMCAT_HOME
      elements: C:\tomcat8
      scope: machine
      state: present
    with_items: "{{ ec2_out.instances }}"
    register: inst_java_home


  #CATALINA_HOME set apache-tomcat-8.5.57.exe
  - name: CATALINA_HOME set apache-tomcat-8.5.57.exe
    win_path:
      name: CATALINA_HOME
      elements: C:\tomcat8
      scope: machine
      state: present
    with_items: "{{ ec2_out.instances }}"
    register: inst_catalina_home

  #- name: reboot
#  - name: reboot win server
#    win_reboot:
#      msg: "Reboot this server 3 secs later"
#      post_reboot_delay: 3
#      test_command: whoami
#
#    with_items: "{{ ec2_out.instances }}"

  - name: check jdk version
    win_shell: "java -version"
    args:
      executable: cmd
    with_items: "{{ ec2_out.instances }}"
    register: java_version


  - name: Firewall rule to allow tomcat on TCP port 8080
    win_firewall_rule:
      name: TOMCAT8_SERVICE
      localport: 8080
      action: allow
      direction: in
      protocol: tcp
      state: present
      enabled: yes
    with_items: "{{ ec2_out.instances }}"


  - name: tomcat service start
    win_service:
      desktop_interact: no
      force_dependent_services: yes
      name: Tomcat8
      start_mode: auto
      state: started
      #state: stopped
      #username: administrator
      username: tomcat
      password: Pass#G*#9087
      #password: "{{ ansible_pass }}"
      #username: LocalSystem
      #password: ''
    with_items: "{{ ec2_out.instances }}"


  #tomcat_start
  #- name: tomcat start shell execute
  #  win_shell: 'tomcat8 //IS//Tomcat8 /user tomcat --DisplayName="Apache Tomcat 8" \
  #    --Install="C:\tomcat8\bin\tomcat8.exe" --Jvm=auto \
  #    --StartMode=jvm --StopMode=jvm \
  #    --StartClass=org.apache.catalina.startup.Bootstrap --StartParams=start \
  #    --StopClass=org.apache.catalina.startup.Bootstrap --StopParams=stop'
  #
  #  with_items: "{{ ec2_out.instances }}"
  #  register: tomcat8_start
