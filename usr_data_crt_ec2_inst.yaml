---
- hosts: localhost
  #connection: local
  gather_facts: no

  vars:
    REGION: 'ap-northeast-2'
    LOCAL_HOME: "{{ lookup('env','HOME')}}"
    VPC_ID: 'vpc-f51eca9e'
    #STATE: absent
    STATE: present
    INSTCNT: 1
    ZN: 'ap-northeast-2c'
    ansible_pass: test@kkk2020
  tasks:

  #Create vpc subnet id
  - name: Create subnet for webnode servers
    ec2_vpc_subnet:
      #state: '{{ STATE }}'
      vpc_id: '{{ VPC_ID }}'
      cidr: 172.31.1.0/24
      az : '{{ ZN }}'
      tags:
        Name: wasnode_subnet
    register: wasnode_subnet
    
  - name: vpc_subnet_facts get 
    ec2_vpc_subnet_facts:
      filters:
        vpc-id: '{{ VPC_ID }}'
        "tag:Name":  "wasnode_subnet" 
    register: subnet_fact

  - set_fact:
      subnet_id: "{{ subnet_fact.subnets[0].subnet_id }}"

  - debug:
      var: subnet_id

  #- meta: end_play
  #Get public ip of my machine
  - name: Get my public IP
    ipify_facts: 

  - name: winwasnode sg group
    ec2_group:
      name: winwas_service_sg
      description: winwas_service
      state: '{{ STATE }}'
      region: '{{ REGION }}'
      #Basically ingress
      rules_egress:
        - proto: tcp
          cidr_ip: 0.0.0.0/0
          to_port: 443
          from_port: 443

      rules:
        - proto: tcp
          from_port: 8080
          to_port: 8080
          #cidr_ip: 0.0.0.0/0
          cidr_ip: 
             - '{{ ipify_public_ip }}/32'
          group_desc: for node
        - proto: tcp 
          #from_port: 22
          #rdpport
          from_port: 3389
          to_port: 3389
          #to_port: 22
          cidr_ip:
             - '{{ ipify_public_ip }}/32'
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 
             - '{{ ipify_public_ip }}/32'

        - proto: tcp 
          #winrm
          from_port: 5986
          to_port: 5986
          cidr_ip:
             - '{{ ipify_public_ip }}/32'

  - name: Create aws instance for winwas
    ec2:
      region: '{{ REGION }}'
      instance_type: t2.micro
      image: ami-0b4d076bfd308be28
      group: winwas_service_sg
      wait: yes
      count: '{{ INSTCNT }}'
      vpc_subnet_id: '{{ subnet_id }}'
      assign_public_ip: yes
      private_ip: '172.31.1.10'
      state: '{{ STATE }}'
      zone: '{{ ZN }}'
      instance_tags:
            name: winwastst
      user_data: "{{ lookup('template','winrm-userdata.txt.j2') }}"
    register: ec2_out

  - debug:
       var: ec2_out


  #Wait for winrm to listen on port 5986
  - name: Wait for WinRM on all hosts
    wait_for:
      port: 5986
      host: "{{ item.public_ip }}"
      timeout: 300
      state: started
    with_items: "{{ ec2_out.instances }}"

  #Win module need module. Do "pip3 install pywinrm"
  - name: Copy a single file as another user
    win_copy:
      src: jdk-8u261-windows-x64.exe
      dest: 'c:\tmp\jdk-8u261-windows-x64.exe'
    vars:
      ansible_user: administrator
      ansible_password: "{{ ansible_pass }}"
      ansible_host: "{{ item.public_ip }}"
      ansible_connection: winrm
      ansible_winrm_transport: basic
      ansible_winrm_server_cert_validation: ignore

    # The tmp dir must be set when using win_copy as another user
    # This ensures the become user will have permissions for the operation
    # Make sure to specify a folder both the ansible_user and the become_user have access to (i.e not %TEMP% which is user specific and requires Admin)
      ansible_remote_tmp: 'c:\tmp'
    with_items: "{{ ec2_out.instances }}"
